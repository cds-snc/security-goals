export const restartJobs = () => {
  const k8s = require('@kubernetes/client-node')
  const kc = new k8s.KubeConfig()

  kc.loadFromDefault()
  const jobsApi = kc.makeApiClient(k8s.Batch_v1Api)

  const namespace = 'symmorfosi-jobs'

  jobsApi
    .listNamespacedJob(namespace)
    .then(res => {
      res.body.items.forEach(item => {
        // Delete autogenerated uids
        delete item.spec.template.metadata.labels['controller-uid']
        delete item.spec.selectors.matchLabels['controller-uid']

        let name = item.metadata.name
        jobsApi
          .deleteNamespacedJob(name, namespace, item)
          .then(() => {
            // Update name of job container
            if (name.includes('-symmorfosi-auto-')) {
              item.metadata.name = `${name.substring(
                0,
                name.indexOf('-symmorfosi-auto-'),
              )}-symmorfosi-auto-${Date.now()}`
            } else {
              item.metadata.name = `${name}-symmorfosi-auto-${Date.now()}`
            }

            jobsApi
              .createNamespacedJob(namespace, item)
              .catch(e => console.log(e))
          })
          .catch(e => console.log(e))
      })
    })
    .catch(e => console.log(e))
}

export const startWatcher = () => {}
